#URLPath (automatic URL decode at the time of capture)
#Capture the payload after last slash from URLPath and store it in a separate variable
SecRule REQUEST_URI "@rx ^.*/([^/]+)$" \
    "id:100001,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_urlpath_value=%{TX.1}',\
    msg:'Captured URL path value: %{TX.raw_urlpath_value}'"

#decode the captured value to base64 
#(if the payload is not base64 value then its a random byte value)
SecRule TX:raw_urlpath_value "@rx .+" \
    "id:100002,phase:2,log,auditlog,pass,t:base64Decode,t:htmlEntityDecode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

#case 1 - payload being urlencoded is decoded automatically at the time of capture 
#case 2 - payload being base64 is decoded and stored in separate var
SecRule TX:raw_urlpath_value|TX:base64_decoded_value "@rx <body.*onload=.*>" \
    "id:100003,phase:2,log,auditlog,block,\
    msg:'Detected XSS in URL path payload',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"
    

#HTMLMultiPartForm
SecRule ARGS "@rx .+" \
    "id:100004,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_arg_value=%{MATCHED_VAR}',\
    msg:'Captured raw argument value: %{TX.raw_arg_value}'"

# Step 2: Decode the captured payload as Base64
SecRule TX:raw_arg_value "@rx .+" \
    "id:100005,phase:2,log,auditlog,pass,t:base64Decode,t:htmlEntityDecode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Decode the captured payload as URL-encoded
SecRule TX:raw_arg_value "@rx .+" \
    "id:100006,phase:2,log,auditlog,pass,t:urlDecodeUni,capture,\
    setvar:'tx.url_decoded_value=%{MATCHED_VAR}',\
    msg:'URL-decoded value: %{TX.url_decoded_value}'"

# Step 4: Inspect both decoded values for malicious XSS patterns
SecRule TX:base64_decoded_value|TX:url_decoded_value "@rx <body.*onload=.*>" \
    "id:100007,phase:2,log,auditlog,block,\
    msg:'Decoded payload contains malicious XSS',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"


#HTMLForm 

SecRule ARGS "@rx .+" \
    "id:100008,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_htmlform_value=%{MATCHED_VAR}',\
    msg:'Captured HTML Form value: %{TX.raw_htmlform_value}'"

# Step 2: Decode the captured value as Base64
SecRule TX:raw_htmlform_value "@rx .+" \
    "id:100009,phase:2,log,auditlog,pass,t:base64Decode,t:htmlEntityDecode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Inspect both the automatically URL-decoded value and Base64-decoded value for malicious XSS patterns
SecRule TX:raw_htmlform_value|TX:base64_decoded_value "@rx <body.*onload=.*>" \
    "id:100010,phase:2,log,auditlog,block,\
    msg:'Detected XSS in HTML Form payload',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"

#URLParam 

SecRule ARGS_GET "@rx .+" \
    "id:100011,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_urlparam_value=%{MATCHED_VAR}',\
    msg:'Captured URL parameter value: %{TX.raw_urlparam_value}'"

# Step 2: Decode the captured value as Base64
SecRule TX:raw_urlparam_value "@rx .+" \
    "id:100012,phase:2,log,auditlog,pass,t:base64Decode,t:htmlEntityDecode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Inspect both the automatically URL-decoded value and Base64-decoded value for malicious XSS patterns
SecRule TX:raw_urlparam_value|TX:base64_decoded_value "@rx <body.*onload=.*>" \
    "id:100013,phase:2,log,auditlog,block,\
    msg:'Detected XSS in URL parameter payload',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"


#JSONRequest
#Make sure this rule is activated for JSON Processor in modsecurity.conf
SecRule REQUEST_HEADERS:Content-Type "^application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

SecRule ARGS "@rx .+" \
    "id:100014,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_arg_value=%{MATCHED_VAR}',\
    msg:'Captured raw argument value: %{TX.raw_arg_value}'"

# Step 2: Decode the captured payload as Base64
SecRule TX:raw_arg_value "@rx .+" \
    "id:100015,phase:2,log,auditlog,pass,t:base64Decode,t:htmlEntityDecode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Decode the captured payload as URL-encoded
SecRule TX:raw_arg_value "@rx .+" \
    "id:100016,phase:2,log,auditlog,pass,t:urlDecodeUni,capture,\
    setvar:'tx.url_decoded_value=%{MATCHED_VAR}',\
    msg:'URL-decoded value: %{TX.url_decoded_value}'"

# Step 4: Inspect both decoded values for malicious XSS patterns
SecRule TX:base64_decoded_value|TX:url_decoded_value "@rx <body.*onload=.*>" \
    "id:100017,phase:2,log,auditlog,block,\
    msg:'Decoded payload contains malicious XSS',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"




#Header and #User-Agent
SecRule REQUEST_HEADERS "@rx .+" \
    "id:100018,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.header_value=%{MATCHED_VAR}',\
    msg:'Captured header argument value: %{TX.header_value}'"

SecRule TX:header_value "@rx .+" \
    "id:100019,phase:2,log,auditlog,pass,t:base64Decode,t:htmlEntityDecode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Decode the captured payload as URL-encoded
SecRule TX:header_value "@rx .+" \
    "id:100020,phase:2,log,auditlog,pass,t:urlDecodeUni,capture,\
    setvar:'tx.url_decoded_value=%{MATCHED_VAR}',\
    msg:'URL-decoded value: %{TX.url_decoded_value}'"

# Step 4: Inspect both decoded values for malicious patterns
SecRule TX:base64_decoded_value|TX:url_decoded_value "@rx <body.*onload=.*>" \
    "id:100021,phase:2,log,auditlog,block,\
    msg:'Decoded payload contains malicious XSS',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"


    








#ARGS TEST - case 1
# Step 1: Capture raw input from HTMLForm or similar placeholders
SecRule ARGS "@rx .+" \
    "id:100401,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_arg_value=%{MATCHED_VAR}',\
    msg:'Captured raw argument value: %{TX.raw_arg_value}'"

# Step 2: Decode the captured payload as Base64
SecRule TX:raw_arg_value "@rx .+" \
    "id:100402,phase:2,log,auditlog,pass,t:base64Decode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Decode the captured payload as URL-encoded
SecRule TX:raw_arg_value "@validateUrlEncoding" \
    "id:100403,phase:2,log,auditlog,pass,t:urlDecodeUni,capture,\
    setvar:'tx.url_decoded_value=%{MATCHED_VAR}',\
    msg:'URL-decoded value: %{TX.url_decoded_value}'"

# Step 4: Inspect both decoded values for malicious XSS patterns
SecRule TX:base64_decoded_value|TX:url_decoded_value "@rx <body.*onload=.*>" \
    "id:100404,phase:2,log,auditlog,block,\
    msg:'Decoded payload contains malicious XSS',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"

# Step 5: Debugging 
SecAction "id:100405,phase:2,log,\
    msg:'Raw value: %{TX.raw_arg_value}, Base64-decoded: %{TX.base64_decoded_value}, URL-decoded: %{TX.url_decoded_value}'"



#case - 2
SecRule ARGS "@rx .+" \
    "id:200401,phase:2,log,auditlog,pass,capture,\
    setvar:'tx.raw_urlparam_value=%{MATCHED_VAR}',\
    msg:'Captured URL parameter value: %{TX.raw_urlparam_value}'"

# Step 2: Decode the captured value as Base64
SecRule TX:raw_urlparam_value "@rx .+" \
    "id:200402,phase:2,log,auditlog,pass,t:base64Decode,capture,\
    setvar:'tx.base64_decoded_value=%{MATCHED_VAR}',\
    msg:'Base64-decoded value: %{TX.base64_decoded_value}'"

# Step 3: Inspect both the automatically URL-decoded value and Base64-decoded value for malicious XSS patterns
SecRule TX:raw_urlparam_value|TX:base64_decoded_value "@rx <body.*onload=.*>" \
    "id:200403,phase:2,log,auditlog,block,\
    msg:'Detected XSS in URL parameter payload',severity:CRITICAL,\
    tag:'paranoia-level/4',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',\
    setvar:'tx.inbound_anomaly_score_pl4=+%{tx.critical_anomaly_score}'"

